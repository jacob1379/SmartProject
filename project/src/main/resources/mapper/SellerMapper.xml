<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.seller.dao.SsellerDao">

	<insert id="SellerSave">
		<!-- <selectKey keyProperty="sId" order="BEFORE" resultType="int"> select 
			nvl(max(S_ID), 0)+1 from S_SELLER </selectKey> -->
		insert into
		S_SELLER(S_ID,S_BUSINESS_NUM,S_PASSWORD,S_NAME,S_BIRTH,S_PHONE,S_EMAIL, S_LEVELS)
		values
		(#{sId},#{sBusinessNum},#{sPassword},#{sName},#{sBirth},#{sPhone},#{sEmail},#{sLevel})
	</insert>

	<update id="SellerUpdate">
		update S_SELLER
		<trim prefix="set" suffixOverrides=",">
			<if test="sPassword != null">S_PASSWORD=#{sPassword},</if>
			<if test="sName != null">S_NAME=#{sName},</if>
			<if test="sPhone != null">S_PHONE=#{sPhone},</if>
			<if test="sEmail != null">S_EMAIL=#{sEmail},</if>
		</trim>
		where S_ID=#{sId}
	</update>

	<delete id="SellerDelete">
		delete from S_SELLER where S_ID=#{sId}
	</delete>
<!-- 
	<select id="SellerRead"
		resultType="com.example.demo.seller.dto.SsellerDto$Read">
  	<![CDATA[
  	select * from S_SELLER where S_ID=#{sId} and rownum<=1
  	]]>
	</select>
-->
	<select id="sFindId" resultType="com.example.demo.seller.entity.Sseller">
		select * from S_SELLER where S_ID=#{sId} and rownum &lt;=1
	</select>
	
	<select id="stPassword" resultType="com.example.demo.seller.entity.Sseller">
		select * from S_SELLER where S_ID=#{sId} and rownum &lt;=1
	</select>
	
	<select id="scPassword" resultType="com.example.demo.seller.entity.Sseller">
		select * from S_SELLER where S_PASSWORD=#{sPassword} and rownum &lt;=1
	</select>
	
	<select id="sFindByEmail" resultType="com.example.demo.seller.entity.Sseller">
		select * from S_SELLER where S_EMAIL=#{sEmail} and rownum &lt;=1
	</select>
	
	<select id="sFindCheckcode" resultType="com.example.demo.seller.entity.Sseller">
		select * from S_SELLER where S_CHECKCODE=#{sCheckcode} and rownum &lt;=1
	</select>
	
	<select id="sFindCheckcodeIsNotEmpty" resultType="String">
		select S_ID from S_SELLER where S_CHECKCODE is not null
	</select>

	<select id="SellerBusinessNumOverlap" parameterType="String"
		resultType="Boolean">
		SELECT COUNT(*) FROM S_SELLER WHERE S_BUSINESS_NUM=#{sBusinessNum} and rownum &lt;=1
	</select>

	<select id="SellerExistsById" resultType="boolean">
		select count(*) from
		S_SELLER where S_ID=#{sId} and rownum &lt;=1
	</select>
	
	<select id="SellerExistsByEmail" resultType="boolean">
		select count(*) from S_SELLER where S_EMAIL=#{sEmail} and rownum &lt;=1
	</select>

</mapper>
